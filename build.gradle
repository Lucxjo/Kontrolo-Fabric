plugins {
    id 'java'
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id "com.modrinth.minotaur" version "1.1.0"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archivesBaseName
version = project.modVersion + "+" + project.minecraft_version
group = project.mavenGroup

repositories {
    maven {
        name 'Shedaniel'
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }

    maven {
        name 'TerraformersMC'
        url "https://maven.terraformersmc.com/releases"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")

    //modImplementation "com.thebrokenrail:modupdater:1.1.11+1.16.2-rc2"
    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

    include(modImplementation("io.github.cottonmc:Jankson-Fabric:${project.jankson}"))

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    from "LICENSE"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload) {
    token = System.getenv("TOKEN") // Use an environment property if releasing your source code on GitHub!
    projectId = '6wfXHI7P' // The ID of your modrinth project, slugs will not work.
    versionNumber = project.version // The version of the mod to upload.
    uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
    addGameVersion('1.19') // Any minecraft version.
    addLoader('fabric') // Can be fabric or forge. Modrinth will support liteloader and rift at a later date.
}

compileKotlin.kotlinOptions.jvmTarget = "17"
